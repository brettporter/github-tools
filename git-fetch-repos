#!/bin/bash
# The script clones all repositories of an GitHub organization.

# the github organization to fetch all repositories for
GITHUB_ORGANIZATION=${GITHUB_ORGANIZATION:=""}
GITHUB_USER=${GITHUB_USER:=""}
GITHUB_CHECKOUT_DIR=${GITHUB_CHECKOUT_DIR:=""}
GITHUB_USER_EMAIL=${GITHUB_USER_EMAIL:=""}

if [ "$GITHUB_CHECKOUT_DIR" == "" ]; then
  GITHUB_CHECKOUT_DIR=$PWD
fi

if [ -f "$HOME/.githubrc" ]; then
  source $HOME/.githubrc
fi

if [ -f "$GITHUB_CHECKOUT_DIR/.githubrc" ]; then
  source $GITHUB_CHECKOUT_DIR/.githubrc
fi

if [ "$GITHUB_USER" == "" ]; then
    echo "Please configure your GITHUB_USER env variable"
    exit 2;
fi
echo "using GITHUB_ORGANIZATION=$GITHUB_ORGANIZATION GITHUB_USER=$GITHUB_USER GITHUB_CHECKOUT_DIR=$GITHUB_CHECKOUT_DIR GITHUB_USER_EMAIL=$GITHUB_USER_EMAIL"

DEBUGGING="0"
if [ "$1" == "--debug" ]; then
    DEBUGGING="1"
elif [ "$2" == "--debug" ]; then
    DEBUGGING="1"
fi

# the git clone cmd used for cloning each repository
# the parameter recursive is used to clone submodules, too.
GIT_CLONE_CMD="git clone -q"
GIT_PULL_CMD="git pull -q"
GIT_CONFIG_REBASE_CMD="git config branch.autosetuprebase always"
GIT_CONFIG_REBASE_MASTER_CMD="git config branch.master.rebase true"

stty -echo
read -p "github password: " GITHUB_PASS; echo
stty echo

if [ ! -d ${GITHUB_CHECKOUT_DIR} ]; then
    echo "${GITHUB_CHECKOUT_DIR} does not exist"
    exit 1;
else
    cd ${GITHUB_CHECKOUT_DIR}
    if [ "$?" != "0" ]; then echo "Failed to change directory to ${GITHUB_CHECKOUT_DIR}"; exit 1; fi

    # fetch repository list via github api
    # grep fetches the json object key ssh_url, which contains the ssh url for the repository
    PAGE=1;
    TMPFILE=`mktemp -t fetch-github-repos`
    if [ "$DEBUGGING" == "1" ]; then
        echo "using tmp file=$TMPFILE"
    fi
    if [ -z "$GITHUB_ORGANIZATION" ]; then
      BASE_URL="https://api.github.com/users/${GITHUB_USER}/repos"
    else
      BASE_URL="https://api.github.com/orgs/${GITHUB_ORGANIZATION}/repos"
    fi

    MORE_TO_READ="1"
    while [ "$MORE_TO_READ" == "1" ]
    do
        MORE_TO_READ="0"

        curl -o "${TMPFILE}" -u "${GITHUB_USER}:${GITHUB_PASS}" --silent --show-error "${BASE_URL}?type=all&page=${PAGE}&per_page=100" -q
        if [ "$DEBUGGING" == "1" ]; then
            cat $TMPFILE;
        fi

        while read reponame repo archived
        do
            MORE_TO_READ="1"

            if [ "$1" == "--list" ]; then
                if [ "$archived" == "true" ]; then
                    echo "$reponame $repo (archived)"
                else
                    echo "$reponame $repo"
                fi
                continue;
            fi

            if [ "$archived" == "true" ]; then
                if [ -d $reponame ]; then
                    echo "WARNING: encountered archived repository ${reponame}"
                fi
            else
                if [ -d $reponame ]; then
                    echo "updating ${reponame}"
                    GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${reponame}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${reponame}/.git" ${GIT_PULL_CMD}
                else
                    echo "cloning ${reponame}"
                    ${GIT_CLONE_CMD} ${repo} ${reponame}
                fi

                # run git commands after checkout/update
                GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${reponame}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${reponame}/.git" ${GIT_CONFIG_REBASE_CMD}
                GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${reponame}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${reponame}/.git" ${GIT_CONFIG_REBASE_MASTER_CMD}
                if [ "$GITHUB_USER_EMAIL" != "" ]; then
                    GIT_WORK_TREE="${GITHUB_CHECKOUT_DIR}/${reponame}" GIT_DIR="${GITHUB_CHECKOUT_DIR}/${reponame}/.git" git config user.email $GITHUB_USER_EMAIL
                fi
            fi
        done < <(cat $TMPFILE | jq -r '.[] | [.name, .ssh_url, .archived] | @tsv')

        let PAGE=PAGE+1
    done
fi
